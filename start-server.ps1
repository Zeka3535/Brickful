# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
# LEGO Catalog Development Server

Write-Host "üîß LEGO Catalog - Development Server" -ForegroundColor Cyan
Write-Host "PowerShell HTTP Server –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor Gray
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (-not (Test-Path "index.html")) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" -ForegroundColor Red
    Write-Host "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(Get-Location)" -ForegroundColor Yellow
    exit 1
}

# –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
$PORT = 8080

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function Get-LocalIP {
    try {
        $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.IPAddress -ne "127.0.0.1" } | Select-Object -First 1).IPAddress
        if ($ip) { return $ip } else { return "localhost" }
    } catch {
        return "localhost"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
function Test-Port {
    param([int]$Port)
    try {
        $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $Port)
        $listener.Start()
        $listener.Stop()
        return $true
    } catch {
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
if (-not (Test-Port -Port $PORT)) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç $PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" -ForegroundColor Red
    Write-Host "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä" -ForegroundColor Yellow
    exit 1
}

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
$localIP = Get-LocalIP

Write-Host "üöÄ LEGO Catalog Development Server" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(Get-Location)" -ForegroundColor White
Write-Host "üåê URL: http://localhost:$PORT" -ForegroundColor White
Write-Host "üì± –ú–æ–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://$localIP`:$PORT" -ForegroundColor White
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:" -ForegroundColor White
Write-Host "   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è: http://localhost:$PORT/" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ –¢–µ—Å—Ç: http://localhost:$PORT/test-simple.html" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray
Write-Host "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C" -ForegroundColor Yellow
Write-Host ""

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
try {
    Start-Process "http://localhost:$PORT"
    Write-Host "üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" -ForegroundColor Yellow
}

Write-Host ""

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
try {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä PowerShell
    $listener = [System.Net.HttpListener]::new()
    $listener.Prefixes.Add("http://localhost:$PORT/")
    $listener.Start()
    
    Write-Host "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
    Write-Host "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤..." -ForegroundColor Gray
    Write-Host ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    while ($listener.IsListening) {
        $context = $listener.GetContext()
        $request = $context.Request
        $response = $context.Response
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        $localPath = $request.Url.LocalPath
        if ($localPath -eq "/") { $localPath = "/index.html" }
        
        $filePath = Join-Path (Get-Location) $localPath.TrimStart('/')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (Test-Path $filePath -PathType Leaf) {
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
            $extension = [System.IO.Path]::GetExtension($filePath).ToLower()
            $mimeType = switch ($extension) {
                ".html" { "text/html; charset=utf-8" }
                ".css" { "text/css; charset=utf-8" }
                ".js" { "application/javascript; charset=utf-8" }
                ".json" { "application/json; charset=utf-8" }
                ".csv" { "text/csv; charset=utf-8" }
                ".png" { "image/png" }
                ".jpg" { "image/jpeg" }
                ".jpeg" { "image/jpeg" }
                ".gif" { "image/gif" }
                ".svg" { "image/svg+xml" }
                ".ico" { "image/x-icon" }
                default { "application/octet-stream" }
            }
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            $content = [System.IO.File]::ReadAllBytes($filePath)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            $response.ContentType = $mimeType
            $response.ContentLength64 = $content.Length
            $response.AddHeader("Access-Control-Allow-Origin", "*")
            $response.AddHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
            $response.AddHeader("Access-Control-Allow-Headers", "Content-Type")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            $response.OutputStream.Write($content, 0, $content.Length)
            $response.StatusCode = 200
            
            Write-Host "‚úÖ $($request.HttpMethod) $localPath - $mimeType" -ForegroundColor Green
        } else {
            # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            $response.StatusCode = 404
            $response.ContentType = "text/html; charset=utf-8"
            $errorHtml = @"
<!DOCTYPE html>
<html>
<head>
    <title>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .error { color: #e74c3c; }
        .path { color: #7f8c8d; }
    </style>
</head>
<body>
    <h1 class="error">404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
    <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: <span class="path">$localPath</span></p>
    <p>–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: <span class="path">$filePath</span></p>
</body>
</html>
"@
            $errorBytes = [System.Text.Encoding]::UTF8.GetBytes($errorHtml)
            $response.OutputStream.Write($errorBytes, 0, $errorBytes.Length)
            
            Write-Host "‚ùå $($request.HttpMethod) $localPath - 404 Not Found" -ForegroundColor Red
        }
        
        $response.Close()
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: $($_.Exception.Message)" -ForegroundColor Red
} finally {
    if ($listener) {
        $listener.Stop()
        $listener.Close()
    }
    Write-Host "üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow
}
